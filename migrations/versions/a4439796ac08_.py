"""empty message

Revision ID: a4439796ac08
Revises: 
Create Date: 2024-04-28 18:59:05.536589

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a4439796ac08'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('students')
    op.drop_table('tag_table')
    op.drop_table('char_table')
    op.drop_table('word_table')
    op.drop_table('grades')
    op.drop_table('page_table')
    op.drop_table('courses')
    op.drop_table('map_table')
    op.drop_table('assignments')
    op.drop_table('enrollments')
    op.drop_table('instructors')
    op.drop_table('groups')
    op.drop_table('content_table')
    op.drop_table('doc_table')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('doc_table',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('path', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_done_ocr', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_done_map', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_done_nlp', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_title_content_found', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_done', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_sent', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='doc_table_pkey'),
    sa.UniqueConstraint('path', name='doc_table_path_key')
    )
    op.create_table('content_table',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('page_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('x1', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('x2', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('y1', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('y2', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('conf', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('num', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content_fixed', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='content_table_pkey')
    )
    op.create_table('groups',
    sa.Column('group_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('group_id', name='groups_pkey')
    )
    op.create_table('instructors',
    sa.Column('instructor_id', sa.INTEGER(), server_default=sa.text("nextval('instructors_instructor_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('instructor_id', name='instructors_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('enrollments',
    sa.Column('enrollment_id', sa.INTEGER(), server_default=sa.text("nextval('enrollments_enrollment_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('stud_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('course_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('enrollment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.CheckConstraint("enrollment_date IS NULL OR enrollment_date >= '1900-01-01'::date", name='valid_enrollment_date'),
    sa.ForeignKeyConstraint(['course_id'], ['courses.course_id'], name='enrollments_course_id_fkey'),
    sa.ForeignKeyConstraint(['stud_id'], ['students.stud_id'], name='enrollments_stud_id_fkey'),
    sa.PrimaryKeyConstraint('enrollment_id', name='enrollments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('assignments',
    sa.Column('assignment_id', sa.INTEGER(), server_default=sa.text("nextval('assignments_assignment_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('course_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('assignment_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('deadline', sa.DATE(), autoincrement=False, nullable=True),
    sa.CheckConstraint('deadline IS NULL OR deadline > CURRENT_DATE', name='deadline_in_future'),
    sa.ForeignKeyConstraint(['course_id'], ['courses.course_id'], name='assignments_course_id_fkey'),
    sa.PrimaryKeyConstraint('assignment_id', name='assignments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('map_table',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('page_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('doc_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('path', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('metadata', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_done', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_successfully', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_sent', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='map_table_pkey'),
    sa.UniqueConstraint('path', name='map_table_path_key')
    )
    op.create_table('courses',
    sa.Column('course_id', sa.INTEGER(), server_default=sa.text("nextval('courses_course_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('course_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('credits', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('instructor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.CheckConstraint('credits > 0', name='courses_credits_check'),
    sa.ForeignKeyConstraint(['instructor_id'], ['instructors.instructor_id'], name='courses_instructor_id_fkey'),
    sa.PrimaryKeyConstraint('course_id', name='courses_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('page_table',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('doc_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('path', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('img_num', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('width', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('height', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_appendix', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('path_to_corrected', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_done_ocr', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_sent', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='page_table_pkey'),
    sa.UniqueConstraint('path', name='page_table_path_key')
    )
    op.create_table('grades',
    sa.Column('grade_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('enrollment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('assignment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('grade_value', sa.CHAR(length=2), autoincrement=False, nullable=True),
    sa.CheckConstraint("grade_value = ANY (ARRAY['A'::bpchar, 'B'::bpchar, 'C'::bpchar, 'D'::bpchar, 'F'::bpchar])", name='valid_grade'),
    sa.ForeignKeyConstraint(['assignment_id'], ['assignments.assignment_id'], name='grades_assignment_id_fkey'),
    sa.ForeignKeyConstraint(['enrollment_id'], ['enrollments.enrollment_id'], name='grades_enrollment_id_fkey'),
    sa.PrimaryKeyConstraint('grade_id', name='grades_pkey')
    )
    op.create_table('word_table',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('x1', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('x2', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('y1', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('y2', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('word', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='word_table_pkey')
    )
    op.create_table('char_table',
    sa.Column('word_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('x1', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('x2', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('y1', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('y2', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('letter', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('tag_table',
    sa.Column('page_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('tag', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_parsed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.UniqueConstraint('page_id', 'tag', name='tag_table_page_id_tag_key')
    )
    op.create_table('students',
    sa.Column('stud_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('date_of_birth', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.CheckConstraint("date_of_birth IS NULL OR date_of_birth >= '1900-01-01'::date", name='valid_date_of_birth'),
    sa.PrimaryKeyConstraint('stud_id', name='students_pkey')
    )
    # ### end Alembic commands ###
